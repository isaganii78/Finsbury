{"utilities":{},"programModules":{"MMS177":{"program":"MMS177","triggers":{"CreateNewPallet":{"name":"CreateNewPallet","method":"PACHK","advice":"PRE","active":true,"modified":1600245112323,"modifiedBy":"NJOHNSON","sourceUuid":"9f9d7074-3551-4f1e-b049-85f4aa7f26b3","programName":"MMS177","utilities":[],"type":"METHOD","priority":500}},"transactions":{},"batches":{}}},"sources":{"9f9d7074-3551-4f1e-b049-85f4aa7f26b3":{"uuid":"9f9d7074-3551-4f1e-b049-85f4aa7f26b3","updated":1648050134117,"updatedBy":"IGUANAI","created":1600244136163,"createdBy":"NJOHNSON","apiVersion":"0.2","beVersion":"16.0.0.20220118134566","codeHash":"325EA7E51699C4E603CD79224219412B69960CDF91C7403F605561DA8F41F9DB","code":""}}}
