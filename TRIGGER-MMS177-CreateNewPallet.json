{"utilities":{},"programModules":{"MMS177":{"program":"MMS177","triggers":{"CreateNewPallet":{"name":"CreateNewPallet","method":"PACHK","advice":"PRE","active":true,"modified":1600245112323,"modifiedBy":"NJOHNSON","sourceUuid":"9f9d7074-3551-4f1e-b049-85f4aa7f26b3","programName":"MMS177","utilities":[],"type":"METHOD","priority":500}},"transactions":{},"batches":{}}},"sources":{"9f9d7074-3551-4f1e-b049-85f4aa7f26b3":{"uuid":"9f9d7074-3551-4f1e-b049-85f4aa7f26b3","updated":1603122874722,"updatedBy":"NJOHNSON","created":1600244136163,"createdBy":"NJOHNSON","apiVersion":"0.2","beVersion":"16.0.0.20200921182353","codeHash":"9841E6B1651FAC4C178296B88B134E86B5405349006CB316A48B6C98E9BF4952","code":""}}}